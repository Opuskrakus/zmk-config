/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
 
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// #include <dt-bindings/zmk/rgb.h>
// #include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/ext_power.h>
// #include <dt-bindings/zmk/mouse.h>

#include "keys_sv.h"

#define BASE 0
#define LOWR 1
#define RAIS 2
#define SYMB 3
#define ADJT 4

//Kolla upp mod type och repeating https://www.youtube.com/watch?v=NAUxTR4vGys

/ {

  // Activate ADJUST layer by pressing raise and lower
    conditional_layers {
        compatible = "zmk,conditional-layers";
        adjust_layer {
            if-layers = <LOWR RAIS>;
            then-layer = <ADJT>;
        };
    };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
// -----------------------------------------------------------------------------------------
            // |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | DEL |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  Ö  |  Ä  |
            //        |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  -  |
            //              | SHFT| GUI | LWR | SPC |   | BKSP| ENT  | RAIS| ALT |

      bindings = <
  &lt RAIS ESC  &kp Q &kp W &kp E     &kp R    &kp T                          &kp Y     &kp U    &kp I     &kp O   &kp P    &kp DEL 
  &mt LCTRL TAB &kp A &kp S &kp D     &kp F    &kp G                          &kp H     &kp J    &kp K     &kp L   &kp SEMI &kp SQT
                &kp Z &kp X &kp C     &kp V    &kp B                          &kp N     &kp M    &kp COMMA &kp DOT &kp FSLH
                &kp LSHFT &kp LGUI &mo LOWR  &mt LALT ENTER              &kp SPACE    &mo RAIS &kp BSPC &kp LALT
      >;
    };

    lower {
      bindings = <
  &kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4 &kp N5                               &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp C_PP
  &mo SYMB   &kp LBKT &kp SV_LBRC &kp SV_RBRC &kp SV_LBKT &kp SV_RBKT       &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
            &kp SV_PIPE &kp SV_LT &kp SV_GT &trans &kp LBKT                  &kp RBKT &trans   &trans &trans    &trans
                                 &trans &trans &trans &trans    &mt LSHFT SPACE &trans   &trans   &trans
      >;
    };
    raise {
      // -----------------------------------------------------------------------------------------
     //  |play |  !   |  "  |  #  |  ¤  |  )  |     |  ^  |  &  |  *  |  (  |  )  | vol+ |
    //   |next | CTRL |     |     |     |     |     |     |  ¨  |  =  |  [  |  ]  | vol- | 
   //          | SHFT |     |     |     |     |     |     |  _  |  +  |  {  |  }  |
   //                 | shi | low |  GUI| SPC |     | bks | ent | rai | lalt|
      bindings = <
  &kp C_PP    &kp EXCL    &kp AT    &kp HASH  &kp DLLR   &kp LPAR               &kp RPAR     &kp PRCNT   &kp KP_MULTIPLY   &kp MINUS    &kp EQUAL  &kp C_VOLUME_UP 
  &kp C_NEXT  &kp MINUS   &kp PLUS  &kp UNDER &kp EQUAL  &kp LBKT               &kp RBKT     &kp CARET   &kp RET           &kp BSLH     &trans     &kp C_VOLUME_DOWN 
                   &trans &kp RBRC  &kp PIPE  &kp TILDE  &kp LBRC               &kp RBRC     &kp AMPS    &kp LT &kp GT       &kp TILDE2
                                 &trans &trans &trans &trans                    &trans &trans &trans &trans
      >;
    };
    Symbols {
  
      bindings = <
 
            &trans     &trans  &trans          &kp NUMBER_7    &kp NUMBER_8    &kp NUMBER_9        &kp KP_PLUS &kp KP_DIVIDE   &kp KP_MULTIPLY &kp KP_MINUS &trans &trans
            &mo SYMB  &trans  &trans          &kp NUMBER_4    &kp NUMBER_5    &kp NUMBER_6        &kp KP_PLUS &trans &trans &trans &trans &trans 
                       &trans  &kp NUMBER_0    &kp NUMBER_1    &kp NUMBER_2    &kp NUMBER_3        &kp RETURN &trans &trans &trans &trans &trans 
                              &trans &trans &trans &trans                &trans &trans &trans &trans 
                

                                 
      >;
    };

    adjust {
      bindings = <
  &kp TILDE &ext_power EXT_POWER_TOGGLE_CMD &trans &trans &trans &trans     &bt BT_CLR  &trans   &trans    &kp MINUS &kp EQUAL   &bt BT_CLR 
  &trans    &trans &trans &trans &trans &bt BT_PRV                          &bt BT_NXT   &bt BT_SEL 0  &bt BT_SEL 1    &trans    &trans      &bt BT_NXT
            &trans &trans &trans &trans &kp LBKT                            &kp RBKT &trans   &kp C_PREV  &kp C_NEXT &ext_power EXT_POWER_TOGGLE_CMD 
                                 &trans &trans &trans &trans        &trans  &trans   &trans &trans

// -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

//&trans      &kp EXCL      &kp AT    &kp HASH      &kp DLLR  &kp PRCNT          &kp CARET   &kp AMPS         &kp KP_MULTIPLY  &kp LPAR  &kp RPAR    &kp DEL
// &trans    &bt BT_CLR  &bt BT_PRV  &bt BT_NXT  &bt BT_SEL 0      &to 3          &kp UNDER  &kp EQUAL         &kp LBKT  &kp RBKT  &kp BSLH  &kp GRAVE
// &trans  &out OUT_TOG      &trans      &trans        &trans     &trans          &kp MINUS   &kp PLUS         &kp LBRC  &kp RBRC  &kp PIPE  &kp TILDE
//                                     &kp LGUI  &kp LEFT_ALT  &kp SPACE            &kp RET     &trans         &kp RALT
 //                                                                     FOR REFERENCE    
      
      
      >;
    };
  };
};        