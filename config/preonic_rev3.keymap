/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
 
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#include "keys_sv.h"

/* Layer definitions */
#define BASE 0  // Default layer
#define NAV  1  // Navigation and editing
#define SYM  2  // Symbols
#define NUM  3  // Numbers and function keys
#define FUN  4  // Function keys and system controls
#define ADJT 5  // Adjust layer (activated by SYM+NAV)

/* Key position shorthand for combos */
// Top row
#define TL0 0   // Grave/Tilde
#define TL1 1   // 1
#define TL2 2   // 2
#define TL3 3   // 3
#define TL4 4   // 4
#define TL5 5   // 5
#define TR0 6   // 6
#define TR1 7   // 7
#define TR2 8   // 8
#define TR3 9   // 9
#define TR4 10  // 0
#define TR5 11  // Backspace

// Second row
#define SL0 12  // Tab
#define SL1 13  // Q
#define SL2 14  // W
#define SL3 15  // E
#define SL4 16  // R
#define SL5 17  // T
#define SR0 18  // Y
#define SR1 19  // U
#define SR2 20  // I
#define SR3 21  // O
#define SR4 22  // P
#define SR5 23  // Del

// Middle row
#define ML0 24  // Esc
#define ML1 25  // A
#define ML2 26  // S
#define ML3 27  // D
#define ML4 28  // F
#define ML5 29  // G
#define MR0 30  // H
#define MR1 31  // J
#define MR2 32  // K
#define MR3 33  // L
#define MR4 34  // Ö
#define MR5 35  // Ä

// Fourth row
#define FL0 36  // Shift
#define FL1 37  // Z
#define FL2 38  // X
#define FL3 39  // C
#define FL4 40  // V
#define FL5 41  // B
#define FR0 42  // N
#define FR1 43  // M
#define FR2 44  // ,
#define FR3 45  // .
#define FR4 46  // -
#define FR5 47  // Return

// Bottom row
#define BL0 48  // Ctrl
#define BL1 49  // Alt
#define BL2 50  // GUI
#define BL3 51  // Lower/NAV
#define BL4 52  // Space
#define BL5 53  // Space
#define BR0 54  // Space
#define BR1 55  // Raise/SYM
#define BR2 56  // Left
#define BR3 57  // Down
#define BR4 58  // Up
#define BR5 59  // Right

/* Behavior customizations */
&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <125>;
};

&mt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <125>;
};

/ {
    /* Combos - useful key combinations */
    combos {
        compatible = "zmk,combos";
        
        /* Programming symbol combos */
        combo_equals {
            timeout-ms = <50>;
            key-positions = <SL3 SL4>;  // E+R
            bindings = <&kp SV_EQUAL>;
        };
        
        combo_colon {
            timeout-ms = <50>;
            key-positions = <ML3 MR3>;  // D+L
            bindings = <&kp SV_COLON>;
        };
        
        combo_semicolon {
            timeout-ms = <50>;
            key-positions = <ML2 MR2>;  // S+K
            bindings = <&kp SV_SEMI>;
        };
        
        combo_slash {
            timeout-ms = <50>;
            key-positions = <MR2 MR3>;  // K+L
            bindings = <&kp SV_FSLH>;
        };
        
        combo_backslash {
            timeout-ms = <50>;
            key-positions = <SR2 SR3>;  // I+O
            bindings = <&kp SV_BSLH>;
        };
        
        combo_pipe {
            timeout-ms = <50>;
            key-positions = <FR3 FR4>;  // .+-
            bindings = <&kp SV_PIPE>;
        };
          
        /* Bracket combos */
        combo_round_brackets {
            timeout-ms = <50>;
            key-positions = <ML5 MR0>;  // G+H
            bindings = <&bracket_macro_paren>;
        };
        
        combo_square_brackets {
            timeout-ms = <50>;
            key-positions = <SL5 SR0>;  // T+Y
            bindings = <&bracket_macro_bracket>;
        };
        
        combo_curly_brackets {
            timeout-ms = <50>;
            key-positions = <FL5 FR0>;  // B+N
            bindings = <&bracket_macro_brace>;
        };
        
        /* Special character combos */
        combo_a_umlaut {
            timeout-ms = <50>;
            key-positions = <ML1 MR1>;  // A+J
            bindings = <&kp SV_A_UMLAUT>;
        };
        
        combo_o_umlaut {
            timeout-ms = <50>;
            key-positions = <SL1 SR1>;  // Q+U
            bindings = <&kp SV_O_UMLAUT>;
        };
        
        combo_a_ring {
            timeout-ms = <50>;
            key-positions = <ML1 SR0>;  // A+Y
            bindings = <&kp SV_A_RING>;
        };
        
        /* Convenient shortcuts */
        combo_del {
            timeout-ms = <50>;
            key-positions = <SR4 SR5>;  // P+Del
            bindings = <&kp DEL>;
        };

        combo_comment {
            timeout-ms = <50>;
            key-positions = <SL2 SR2>;  // W+I
            bindings = <&kp LC(LS(N7))>;
        };
    };
    
    /* Macros - useful sequences */
    macros {
        /* Bracket macros that insert matching pair and place cursor in the middle */
        bracket_macro_paren: bracket_macro_paren {
            label = "BRACKET_MACRO_PAREN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SV_LPAR &kp SV_RPAR &kp LEFT>;
        };
        
        bracket_macro_bracket: bracket_macro_bracket {
            label = "BRACKET_MACRO_BRACKET";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SV_LBKT &kp SV_RBKT &kp LEFT>;
        };
        
        bracket_macro_brace: bracket_macro_brace {
            label = "BRACKET_MACRO_BRACE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SV_LBRC &kp SV_RBRC &kp LEFT>;
        };
        
        /* Arrow macros for programming */
        arrow_right: arrow_right {
            label = "ARROW_RIGHT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SV_MINUS &kp SV_GT>;
        };
        
        arrow_left: arrow_left {
            label = "ARROW_LEFT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SV_LT &kp SV_MINUS>;
        };
        
        arrow_fat: arrow_fat {
            label = "ARROW_FAT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SV_EQUAL &kp SV_GT>;
        };
    };

    /* Conditional layers */
    conditional_layers {
        compatible = "zmk,conditional-layers";
        adjust_layer {
            if-layers = <NAV SYM>;
            then-layer = <ADJT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        /* BASE layer */
        default_layer {
            bindings = <
                &kp GRAVE       &kp N1          &kp N2          &kp N3          &kp N4          &kp N5          &kp N6          &kp N7          &kp N8          &kp N9          &kp N0          &kp BSPC
                &kp ESC         &kp Q           &kp W           &kp E           &kp R           &kp T           &kp Y           &kp U           &kp I           &kp O           &kp P           &kp DEL
                &mt LCTRL TAB   &mt LGUI A      &mt LALT S      &mt LCTRL D     &mt LSHFT F     &kp G           &kp H           &mt RSHFT J     &mt RCTRL K     &mt RALT L      &mt RGUI SV_O_UMLAUT  &mt RALT SV_A_UMLAUT
                &kp LSHFT       &kp Z           &kp X           &kp C           &kp V           &kp B           &kp N           &kp M           &kp COMMA       &kp DOT         &kp SV_MINUS    &kp RET
                &kp LCTRL       &kp LALT        &kp LGUI        &lt NAV TAB     &lt NUM SPACE   &kp SPACE       &kp SPACE       &lt SYM RET     &lt FUN LEFT    &kp DOWN        &kp UP          &kp RIGHT
            >;
        };

        /* NAV layer - Navigation and editing controls */
        nav_layer {
            bindings = <
                &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans
                &trans          &kp PG_UP       &kp LC(LS(C))   &kp UP          &kp LC(LS(TAB)) &kp LC(TAB)     &kp HOME        &kp PG_DN       &kp PG_UP       &kp END         &kp LA(D)       &kp DEL
                &trans          &kp PG_DN       &kp LEFT        &kp DOWN        &kp RIGHT       &kp LA(TAB)     &kp LEFT        &kp DOWN        &kp UP          &kp RIGHT       &kp RET         &trans
                &trans          &kp LC(Z)       &kp LC(X)       &kp LC(C)       &kp LC(V)       &kp LC(Y)       &kp LC(LS(C))   &kp LC(LS(V))   &kp LC(LS(T))   &kp LA(LS(TAB)) &kp LC(TAB)     &trans
                &trans          &trans          &trans          &trans          &trans          &kp SPACE       &kp SPACE       &kp RET         &kp BSPC        &trans          &trans          &trans
            >;
        };

        /* SYM layer - Programming symbols for easy access */
        symbols_layer {
            bindings = <
                &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans
                &trans          &kp SV_EXCL     &kp SV_AT       &kp SV_HASH     &kp SV_DOLLAR   &kp SV_PRCNT    &kp SV_CARET    &kp SV_AMPS     &kp SV_ASTRK    &kp SV_LPAR     &kp SV_RPAR     &trans
                &trans          &kp SV_BSLH     &kp SV_PIPE     &kp SV_EQUAL    &kp SV_PLUS     &kp SV_MINUS    &kp SV_UNDER    &kp SV_LBRC     &kp SV_RBRC     &kp SV_LBKT     &kp SV_RBKT     &trans
                &trans          &arrow_left     &arrow_right    &arrow_fat      &kp SV_COLON    &kp SV_SEMI     &kp SV_DQT      &kp SV_SQT      &kp SV_LT       &kp SV_GT       &kp SV_QMARK    &trans
                &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans
            >;
        };

        /* NUM layer - Numbers and arithmetic */
        num_layer {
            bindings = <
                &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans
                &trans          &kp N1          &kp N2          &kp N3          &kp N4          &kp N5          &kp N6          &kp N7          &kp N8          &kp N9          &kp N0          &trans
                &trans          &kp LGUI        &kp LALT        &kp LCTRL       &kp LSHFT       &kp TAB         &kp KP_PLUS     &kp N4          &kp N5          &kp N6          &kp KP_MULTIPLY &trans
                &trans          &none           &none           &none           &none           &none           &kp KP_MINUS    &kp N1          &kp N2          &kp N3          &kp KP_DIVIDE   &trans
                &trans          &trans          &trans          &trans          &trans          &kp SPACE       &kp SPACE       &kp N0          &kp DOT         &trans          &trans          &trans
            >;
        };

        /* FUN layer - Function keys and system controls */
        func_layer {
            bindings = <
                &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans
                &kp F1          &kp F2          &kp F3          &kp F4          &kp F5          &kp F6          &kp F7          &kp F8          &kp F9          &kp F10         &kp F11         &kp F12
                &trans          &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &kp C_MUTE      &kp C_VOL_DN    &kp C_VOL_UP    &kp C_PP        &kp C_NEXT      &trans
                &trans          &bt BT_CLR      &out OUT_TOG    &none           &none           &ext_power EP_TOG &kp CAPS      &kp SLCK        &kp PSCRN       &kp C_PREV      &kp PAUSE_BREAK &trans
                &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans
            >;
        };

        /* ADJUST layer - Only accessible by holding SYM+NAV */
        adjust_layer {
            bindings = <
                &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans
                &sys_reset      &bootloader     &none           &none           &none           &none           &none           &none           &none           &none           &bootloader     &sys_reset
                &none           &bt BT_CLR      &bt BT_PRV      &bt BT_NXT      &out OUT_TOG    &none           &none           &none           &none           &none           &none           &none
                &none           &none           &none           &none           &none           &ext_power EP_TOG &none         &none           &none           &none           &none           &none
                &none           &none           &none           &trans          &trans          &none           &none           &trans          &trans          &none           &none           &none
            >;
        };
    };
}; 